{
   "swagger":"2.0",
   "info":{
      "version":"1.0.0",
      "title":"LoopBack Application"
   },
   "basePath":"/api",
   "consumes":[
      "application/json",
      "application/x-www-form-urlencoded",
      "application/xml",
      "text/xml"
   ],
   "produces":[
      "application/json",
      "application/xml",
      "text/xml",
      "application/javascript",
      "text/javascript"
   ],
   "paths":{
      "/pets":{
         "post":{
            "tags":[
               "Pet"
            ],
            "summary":"Create a new instance of the model and persist it into the data source.",
            "operationId":"Pet.create",
            "parameters":[
               {
                  "name":"data",
                  "in":"body",
                  "description":"Model instance data",
                  "required":false,
                  "schema":{
                     "$ref":"#/definitions/Pet"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Request was successful",
                  "schema":{
                     "$ref":"#/definitions/Pet"
                  }
               }
            },
            "deprecated":false
         },
         "put":{
            "tags":[
               "Pet"
            ],
            "summary":"Update an existing model instance or insert a new one into the data source.",
            "operationId":"Pet.upsert",
            "parameters":[
               {
                  "name":"data",
                  "in":"body",
                  "description":"Model instance data",
                  "required":false,
                  "schema":{
                     "$ref":"#/definitions/Pet"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Request was successful",
                  "schema":{
                     "$ref":"#/definitions/Pet"
                  }
               }
            },
            "deprecated":false
         },
         "get":{
            "tags":[
               "Pet"
            ],
            "summary":"Find all instances of the model matched by filter from the data source.",
            "operationId":"Pet.find",
            "parameters":[
               {
                  "name":"filter",
                  "in":"query",
                  "description":"Filter defining fields, where, include, order, offset, and limit",
                  "required":false,
                  "type":"string",
                  "format":"JSON"
               }
            ],
            "responses":{
               "200":{
                  "description":"Request was successful",
                  "schema":{
                     "type":"array",
                     "items":{
                        "$ref":"#/definitions/Pet"
                     }
                  }
               }
            },
            "deprecated":false
         }
      },
      "/pets/{id}/exists":{
         "get":{
            "tags":[
               "Pet"
            ],
            "summary":"Check whether a model instance exists in the data source.",
            "operationId":"Pet.exists__get_pets_{id}_exists",
            "parameters":[
               {
                  "name":"id",
                  "in":"path",
                  "description":"Model id",
                  "required":true,
                  "type":"string",
                  "format":"JSON"
               }
            ],
            "responses":{
               "200":{
                  "description":"Request was successful",
                  "schema":{
                     "type":"object",
                     "properties":{
                        "exists":{
                           "type":"boolean"
                        }
                     }
                  }
               }
            },
            "deprecated":false
         }
      },
      "/pets/{id}":{
         "head":{
            "tags":[
               "Pet"
            ],
            "summary":"Check whether a model instance exists in the data source.",
            "operationId":"Pet.exists__head_pets_{id}",
            "parameters":[
               {
                  "name":"id",
                  "in":"path",
                  "description":"Model id",
                  "required":true,
                  "type":"string",
                  "format":"JSON"
               }
            ],
            "responses":{
               "200":{
                  "description":"Request was successful",
                  "schema":{
                     "type":"object",
                     "properties":{
                        "exists":{
                           "type":"boolean"
                        }
                     }
                  }
               }
            },
            "deprecated":false
         },
         "get":{
            "tags":[
               "Pet"
            ],
            "summary":"Find a model instance by id from the data source.",
            "operationId":"Pet.findById",
            "parameters":[
               {
                  "name":"id",
                  "in":"path",
                  "description":"Model id",
                  "required":true,
                  "type":"string",
                  "format":"JSON"
               },
               {
                  "name":"filter",
                  "in":"query",
                  "description":"Filter defining fields and include",
                  "required":false,
                  "type":"string",
                  "format":"JSON"
               }
            ],
            "responses":{
               "200":{
                  "description":"Request was successful",
                  "schema":{
                     "$ref":"#/definitions/Pet"
                  }
               }
            },
            "deprecated":false
         },
         "delete":{
            "tags":[
               "Pet"
            ],
            "summary":"Delete a model instance by id from the data source.",
            "operationId":"Pet.deleteById",
            "parameters":[
               {
                  "name":"id",
                  "in":"path",
                  "description":"Model id",
                  "required":true,
                  "type":"string",
                  "format":"JSON"
               }
            ],
            "responses":{
               "200":{
                  "description":"Request was successful",
                  "schema":{
                     "type":"object"
                  }
               }
            },
            "deprecated":false
         },
         "put":{
            "tags":[
               "Pet"
            ],
            "summary":"Update attributes for a model instance and persist it into the data source.",
            "operationId":"Pet.prototype.updateAttributes",
            "parameters":[
               {
                  "name":"data",
                  "in":"body",
                  "description":"An object of model property name/value pairs",
                  "required":false,
                  "schema":{
                     "$ref":"#/definitions/Pet"
                  }
               },
               {
                  "name":"id",
                  "in":"path",
                  "description":"PersistedModel id",
                  "required":true,
                  "type":"string",
                  "format":"JSON"
               }
            ],
            "responses":{
               "200":{
                  "description":"Request was successful",
                  "schema":{
                     "$ref":"#/definitions/Pet"
                  }
               }
            },
            "deprecated":false
         }
      },
      "/pets/findOne":{
         "get":{
            "tags":[
               "Pet"
            ],
            "summary":"Find first instance of the model matched by filter from the data source.",
            "operationId":"Pet.findOne",
            "parameters":[
               {
                  "name":"filter",
                  "in":"query",
                  "description":"Filter defining fields, where, include, order, offset, and limit",
                  "required":false,
                  "type":"string",
                  "format":"JSON"
               }
            ],
            "responses":{
               "200":{
                  "description":"Request was successful",
                  "schema":{
                     "$ref":"#/definitions/Pet"
                  }
               }
            },
            "deprecated":false
         }
      },
      "/pets/update":{
         "post":{
            "tags":[
               "Pet"
            ],
            "summary":"Update instances of the model matched by where from the data source.",
            "operationId":"Pet.updateAll",
            "parameters":[
               {
                  "name":"where",
                  "in":"query",
                  "description":"Criteria to match model instances",
                  "required":false,
                  "type":"string",
                  "format":"JSON"
               },
               {
                  "name":"data",
                  "in":"body",
                  "description":"An object of model property name/value pairs",
                  "required":false,
                  "schema":{
                     "$ref":"#/definitions/Pet"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Request was successful",
                  "schema":{
                     "description":"The number of instances updated",
                     "type":"object"
                  }
               }
            },
            "deprecated":false
         }
      },
      "/pets/count":{
         "get":{
            "tags":[
               "Pet"
            ],
            "summary":"Count instances of the model matched by where from the data source.",
            "operationId":"Pet.count",
            "parameters":[
               {
                  "name":"where",
                  "in":"query",
                  "description":"Criteria to match model instances",
                  "required":false,
                  "type":"string",
                  "format":"JSON"
               }
            ],
            "responses":{
               "200":{
                  "description":"Request was successful",
                  "schema":{
                     "type":"object",
                     "properties":{
                        "count":{
                           "type":"number",
                           "format":"double"
                        }
                     }
                  }
               }
            },
            "deprecated":false
         }
      },
      "/pets/change-stream":{
         "post":{
            "tags":[
               "Pet"
            ],
            "summary":"Create a change stream.",
            "operationId":"Pet.createChangeStream__post_pets_change-stream",
            "parameters":[
               {
                  "name":"options",
                  "in":"formData",
                  "required":false,
                  "type":"string",
                  "format":"JSON"
               }
            ],
            "responses":{
               "200":{
                  "description":"Request was successful",
                  "schema":{
                     "type":"file"
                  }
               }
            },
            "deprecated":false
         },
         "get":{
            "tags":[
               "Pet"
            ],
            "summary":"Create a change stream.",
            "operationId":"Pet.createChangeStream__get_pets_change-stream",
            "parameters":[
               {
                  "name":"options",
                  "in":"query",
                  "required":false,
                  "type":"string",
                  "format":"JSON"
               }
            ],
            "responses":{
               "200":{
                  "description":"Request was successful",
                  "schema":{
                     "type":"file"
                  }
               }
            },
            "deprecated":false
         }
      }
   },
   "definitions":{
      "Pet":{
         "properties":{
            "id":{
               "type":"number",
               "format":"double"
           },
           "name":{
               "type":"string"
           }
         },
         "additionalProperties":false
      }
   },
   "tags":[
      {
         "name":"Pet"
      }
   ]
}
